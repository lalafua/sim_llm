import requests
import json
import os

DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
PROMPT = """
    You are the most accurate command parser! Your task is to transfer information between human and robot.
    
    CLASS_NAME = (
        'mask',
        'phone',
        'bottle',
        'gloves',
        'metal',
        'palstic bag',
        'sunglasses',
        'boll',
        'door',
        'other',
    )

    # Instructions
    - First, Abstracting actionable words from conversations.
    - Second, Compare the object to the object in CLASS_NAME and choose the word with the closest meaning to replace it.
    - Finally, Generate a json string.

    # Example
    conversation: give me a garbage bag.
    answer:{
        "commands":[
            {
                "index": 0
                "command": "find",
                "parms":{
                    "object":"palstic bag"
                }
            }
            {
                "index": 1
                "command": "give",
                "parms":{
                    "object":"palstic bag"
                
            }
        ]
    }

    conversation: find my Coke.
    answer:{
        "commands":[
            {
                "index": 0
                "command": "find",
                "parms":{
                    "object":"bottle"
                }
            }
        ]
    }

    conversation: pick up my phone and close the door.
    answer:{
        "commands":[
            {
                "index": 0
                "command": "pick_up",
                "parms":{
                    "object": "phone"
                }
            },
            {
                "index": 0
                "command": "close",
                "parms":{
                    "object": "door"
                }
            }
        ]
    }
"""

def dps_genai(msg):
    """
    This function uses the large language model to generate a response from the prompt.
    
    Args:
        prompt(str): The prompt to generate
    
    Return:
        response.text(str): Json string generated by Gemini
    """

    api_url = "https://api.deepseek.com/chat/completions"
    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer {}".format(DEEPSEEK_API_KEY)
    }
    payload = {
        "model": "deepseek-chat",
        "messages": [
            {
                "role": "system",
                "content": PROMPT
            },
            {
                "role": "user",
                "content": msg
            }
        ],
        "stream": False
    }

    try:
        response = requests.post(
            url=api_url,
            headers=headers,
            json=payload,
            timeout=20
        )

        response.raise_for_status()

        response_data = response.json()

        print(json.dumps(response_data, indent=4))

        if 'choices' in response_data and len(response_data['choices']) > 0:
            response_content = response_data['choices'][0]['message']['content']
            response_content = response_content.replace("```json", "").replace("```", "").strip()
            print(response_content)

    except requests.exceptions.RequestException as e:
        print("Error: {}".format(e))
        if hasattr(e, 'response') and e.response is not None:
            print(f"Status Code: {e.response.status_code}")
            try:
                print(f"Error Body: {e.response.json()}")
            except json.JSONDecodeError:
                print(f"Error Body: {e.response.text}")

    except Exception as e:
        print("Error: {}".format(e))


def wait_for_input():
    user_input = input("Input command: \n")
    dps_genai(msg=user_input)

if __name__ == "__main__":
    wait_for_input()